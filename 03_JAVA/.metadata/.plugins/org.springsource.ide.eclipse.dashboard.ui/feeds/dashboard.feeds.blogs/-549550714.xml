<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 23 May 2025 00:48:19 GMT</lastBuildDate><item><title><![CDATA[Spring for Apache Pulsar 1.1.12 and 1.2.6 are now available]]></title><link>https://spring.io/blog/2025/05/23/spring-for-apache-pulsar-1-1-12-and-1-2-6-are-now-available</link><guid isPermaLink="true">https://spring.io/blog/2025/05/23/spring-for-apache-pulsar-1-1-12-and-1-2-6-are-now-available</guid><dc:creator><![CDATA[onobc]]></dc:creator><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, Iâ€™m happy to announce that Spring for Apache Pulsar &lt;code&gt;1.1.12&lt;/code&gt; and &lt;code&gt;1.2.6&lt;/code&gt; have been released and are now available from Maven Central.&lt;/p&gt;
&lt;p&gt;The releases will be included in the upcoming Spring Boot &lt;a href=&quot;https://github.com/spring-projects/spring-boot/milestones/3.3.12&quot;&gt;3.3.12&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-boot/milestones/3.4.6&quot;&gt;3.4.6&lt;/a&gt; releases, respectively.&lt;/p&gt;
&lt;p&gt;Please see the release notes (&lt;a href=&quot;https://github.com/spring-projects/spring-pulsar/releases/tag/v1.1.12&quot;&gt;1.1.12&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-pulsar/releases/tag/v1.2.6&quot;&gt;1.2.6&lt;/a&gt;) for more details.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[A Bootiful Podcast: Spring IO founder Sergi Almar on Spring IO 2025]]></title><link>https://spring.io/blog/2025/05/22/a-bootiful-podcast-sergi-almar</link><guid isPermaLink="true">https://spring.io/blog/2025/05/22/a-bootiful-podcast-sergi-almar</guid><dc:creator><![CDATA[joshlong]]></dc:creator><pubDate>Thu, 22 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring and Spring I/O fans! In this installment we have the privilege of chatting with friend of the community and legend Sergi Almar about the amazing Spring IO 2025, where this episode was published, and a lot more.&lt;/p&gt;
&lt;iframe title=&quot;Spring IO founder Sergi Almar on Spring IO 2025&quot; allowtransparency=&quot;true&quot; height=&quot;300&quot; width=&quot;100%&quot; style=&quot;border: none; min-width: min(100%, 430px);height:300px;&quot; scrolling=&quot;no&quot; data-name=&quot;pb-iframe-player&quot; src=&quot;https://www.podbean.com/player-v2/?from=embed&amp;i=t9ya5-18b72ad-pb&amp;square=1&amp;share=1&amp;download=1&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;rtl=0&amp;logo_link=&amp;btn-skin=7&amp;size=300&quot; loading=&quot;lazy&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[Spring Data Ahead of Time Repositories]]></title><link>https://spring.io/blog/2025/05/22/spring-data-ahead-of-time-repositories</link><guid isPermaLink="true">https://spring.io/blog/2025/05/22/spring-data-ahead-of-time-repositories</guid><dc:creator><![CDATA[christophstrobl]]></dc:creator><pubDate>Thu, 22 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In the past couple of years we have seen heavy investment throughout the Java ecosystem to reduce application startup times. The main focus gravitates around Ahead-of-Time optimizations.
May it be condensing code into a GraalVM native executable, capturing already optimized bytecode with Coordinated Restore at Checkpoint (CRaC), Class Data Sharing (CDS) or its more recent successor AOT cache (part of project &lt;a href=&quot;https://openjdk.org/projects/leyden/&quot;&gt;Leyden&lt;/a&gt;).
While barriers to entry vary between the different approaches, all of them move performance optimizations away from runtime into an earlier phase, such as build time or a separate packaging step.&lt;/p&gt;
&lt;p&gt;The Spring portfolio has you covered: It supports you in whichever direction you want to take it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Providing runtime hints for GraalVM native images&lt;/li&gt;
&lt;li&gt;Generating AOT code for bean definitions and wiring&lt;/li&gt;
&lt;li&gt;Application Context snapshotting using Project Leyden premain training runs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With Spring Data 4.0 (or the &lt;code&gt;2025.1&lt;/code&gt; release train if you prefer calver) we are taking your repositories to AOT. We are shifting all the Repository preparations that are done at application startup to build time.&lt;/p&gt;
&lt;h1 id=&quot;how-does-it-work-and-what-can-you-expect&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-does-it-work-and-what-can-you-expect&quot; aria-label=&quot;how does it work and what can you expect permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How does it work and what can you expect?&lt;/h1&gt;
&lt;p&gt;In short, when setting the &lt;code&gt;spring.aot.repositories.enabled=true&lt;/code&gt; configuration property, our AOT processing turns your repository query methods into actual source code by relying on the store-specific nature of the repository.
Generated query methods contain the exact same code you would write if you would not use Spring Data to run your query.
The generated source is then compiled together with your application and backing the repository interface.&lt;/p&gt;
&lt;p&gt;Imagine a repository of pet owners as outlined below.&lt;/p&gt;
&lt;p&gt;The repository itself does not inherit any functionality from one of the base repositories like &lt;code&gt;CrudRepository&lt;/code&gt; to keep the exposed functionality at a minimum.
Still the &lt;code&gt;save&lt;/code&gt; method matches the signature of one of the predefined methods, while the two listed query methods are using a derived as well as explicitly annotated approach.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface OwnerRepository extends Repository&amp;#x3C;Owner, Integer&gt; {

    Owner save(Owner owner);

    List&amp;#x3C;OwnerSummary&gt; findAllByLastName(String lastName);

    @Transactional(readOnly = true)
    @Query(&quot;SELECT DISTINCT owner FROM Owner owner left join owner.pets WHERE owner.lastName LIKE :lastName%&quot;)
    Page&amp;#x3C;Owner&gt; findByLastName(@Param(&quot;lastName&quot;) String lastName, Pageable pageable);

    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;During the AOT phase the infrastructure will only consider relevant parts for the code generation.
Take the before mentioned &lt;code&gt;save&lt;/code&gt; method for example: Since we are using JPA here, &lt;code&gt;SimpleJpaRepository&lt;/code&gt; already holds a default implementation for the &lt;code&gt;save&lt;/code&gt; method, allowing the code generation to skip the method.
The same is true for any of your custom implementations.
The remaining two methods for &lt;code&gt;OwnerRepository&lt;/code&gt; however are of course subject to AOT optimizations and end up in &lt;code&gt;OwnerRepositoryImpl__Aot&lt;/code&gt; located in the same package as the source &lt;code&gt;OwnerRepository&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Generated
public class OwnerRepositoryImpl__Aot extends AotRepositoryFragmentSupport {

  private final EntityManager entityManager;

  public OwnerRepositoryImpl__Aot(EntityManager entityManager,
    RepositoryFactoryBeanSupport.FragmentCreationContext context) {
    // ...
  }

  /**
   * AOT generated implementation of {@link OwnerRepository#findAllByLastName(String)}.
   */
  public List&amp;#x3C;OwnerSummary&gt; findAllByLastName(String lastName) {
    String queryString = &quot;SELECT o.firstName AS firstName, o.lastName AS lastName, o.city AS city FROM org.springframework.samples.petclinic.owner.Owner o WHERE o.lastName = :lastName&quot;;
    Query query = this.entityManager.createQuery(queryString, Tuple.class);
    query.setParameter(&quot;lastName&quot;, lastName);

    return (List&amp;#x3C;OwnerSummary&gt;) convertMany(query.getResultList(), false, OwnerSummary.class);
  }

  /**
   * AOT generated implementation of {@link OwnerRepository#findByLastName(String,Pageable)}.
   */
  public Page&amp;#x3C;Owner&gt; findByLastName(String lastName, Pageable pageable) {
    String queryString = &quot;SELECT DISTINCT owner FROM Owner owner left join owner.pets WHERE owner.lastName LIKE :lastName&quot;;
    String countQueryString = &quot;SELECT count(DISTINCT owner) FROM Owner owner left join owner.pets WHERE owner.lastName LIKE :lastName&quot;;
    if (pageable.getSort().isSorted()) {
      DeclaredQuery declaredQuery = DeclaredQuery.jpqlQuery(queryString);
      queryString = rewriteQuery(declaredQuery, pageable.getSort(), Owner.class);
    }
    Query query = this.entityManager.createQuery(queryString);
    query.setParameter(&quot;lastName&quot;, &quot;%s%%&quot;.formatted(lastName));
    if (pageable.isPaged()) {
      query.setFirstResult(Long.valueOf(pageable.getOffset()).intValue());
      query.setMaxResults(pageable.getPageSize());
    }
    LongSupplier countAll = () -&gt; {
      Query countQuery = this.entityManager.createQuery(countQueryString);
      countQuery.setParameter(&quot;lastName&quot;, &quot;%s%%&quot;.formatted(lastName));
      return (Long) countQuery.getSingleResult();
    };

    return PageableExecutionUtils.getPage((List&amp;#x3C;Owner&gt;) query.getResultList(), pageable, countAll);
  }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see the generated code can be rather simple or grow in complexity depending on the query, parameter binding or the requested data and its representation.
On application startup, the AOT-generated classes are wired into the repository composition that is backing the proxy created for the repository interface.
So for the first time you can actually see and step into the code that is run when calling a method on a repository interface.&lt;/p&gt;
&lt;p&gt;Debugability aside, pre-generated code helps with parsing queries and exploring assumptions. It shortens code paths during repository bootstrap leading to faster overall application startup and less memory.&lt;/p&gt;
&lt;img style=&quot;float: right; display: block; margin: auto;&quot; src=&quot;https://raw.githubusercontent.com/spring-io/spring-io-static/refs/heads/main/blog/cstrobl/20250522/spring-petclinic-jpa-aot-repositories-benchmark-green_theme.png&quot;&gt;
&lt;p&gt;Depending on the underlying data store the reduction can be rather significant, like for Spring Data JPA leading to an additional startup boost and less memory on top of already more efficient AOT optimizations.&lt;/p&gt;
&lt;p&gt;Ahead-of-Time repositories are currently a preview feature that in their first incarnation being available for JPA (via Hibernate only) and MongoDB, with more modules to follow with upcoming milestones.&lt;/p&gt;
&lt;p&gt;Please give this new feature a try and do not hesitate to get in touch with us to let us know what you think.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Integration 6.5 GA Available]]></title><link>https://spring.io/blog/2025/05/22/spring-integration-6-5-released</link><guid isPermaLink="true">https://spring.io/blog/2025/05/22/spring-integration-6-5-released</guid><dc:creator><![CDATA[artembilan]]></dc:creator><pubDate>Thu, 22 May 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who contributed, I am pleased to announce the General Avalilability of Spring Integration &lt;code&gt;6.5.0&lt;/code&gt; generation.&lt;/p&gt;
&lt;p&gt;In addition, the &lt;code&gt;6.3.10&lt;/code&gt; and &lt;code&gt;6.4.5&lt;/code&gt; versions with bug fixes and dependency upgrades have been released.&lt;/p&gt;
&lt;p&gt;Some notable changes in &lt;code&gt;6.5.0&lt;/code&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;AbstractRecentFileListFilter&lt;/code&gt; - the &lt;code&gt;FileListFilter&lt;/code&gt; to accept only files which are recent according to the provided &lt;code&gt;age&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;AbstractMessageChannel&lt;/code&gt; now emits a special &lt;code&gt;MessageDispatchingException&lt;/code&gt; for the situation when message production is initiated too early;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;PollerMetadata.sendTimeout&lt;/code&gt; option has been removed (deprecated before) since it is out of use;&lt;/li&gt;
&lt;li&gt;The Hazelcast CP-subsystem based components in the &lt;code&gt;spring-integration-hazelcast&lt;/code&gt; module have been deprecated due to commercial support of the Hazelcast features (stating with &lt;code&gt;5.5.0&lt;/code&gt;) we relied on;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;LockRequestHandlerAdvice&lt;/code&gt; to ensure exclusive access to the underlying service method call;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;MessageChannel&lt;/code&gt; no emits a special &lt;code&gt;MessageDispatchingException&lt;/code&gt; when aplication context is not ready, e.g. not started yet or stopped at runtime;&lt;/li&gt;
&lt;li&gt;The Java DSL &lt;code&gt;gateway()&lt;/code&gt; operator now fully supports an &lt;code&gt;async(true)&lt;/code&gt; behavior;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;SourcePollingChannelAdapter&lt;/code&gt; endpoint now starts a &lt;code&gt;CONSUMER&lt;/code&gt; kind observation for the received message;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ReactiveRedisStreamMessageHandler&lt;/code&gt; now exposes a &lt;code&gt;Function&amp;#x3C;Message&amp;#x3C;?&gt;, RedisStreamCommands.XAddOptions&gt;&lt;/code&gt; to provide additional &lt;code&gt;XADD&lt;/code&gt; option via convenient &lt;code&gt;RedisStreamCommands.XAddOptions&lt;/code&gt; API;&lt;/li&gt;
&lt;li&gt;Most of major/minor dependency upgrades.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&quot;https://docs.spring.io/spring-integration/reference/6.5/whats-new.html&quot;&gt;What&apos;s New in 6.5&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Also a &lt;a href=&quot;https://github.com/spring-projects/spring-integration/wiki/Spring-Integration-6.4-to-6.5-Migration-Guide&quot;&gt;Migration Guide&lt;/a&gt; contains some breaking changes in this new version.&lt;/p&gt;
&lt;p&gt;We are switching now to Spring Integration &lt;code&gt;7.0&lt;/code&gt;  based on Spring Framework &lt;code&gt;7.0&lt;/code&gt;.
Don&apos;t hesitate to reach us out in GitHub issues for the the project with any feedback!&lt;/p&gt;
&lt;p&gt;Cheers,Â &lt;br&gt;
Artem&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://projects.spring.io/spring-integration/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-integration/issues&quot;&gt;GitHub Issues&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-integration/blob/main/CONTRIBUTING.adoc&quot;&gt;Contributing&lt;/a&gt; | &lt;a href=&quot;http://stackoverflow.com/questions/tagged/spring-integration&quot;&gt;Help&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>